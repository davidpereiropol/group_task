---
title: "Mafalda test"
author: "Mafalda Gonzalez"
format: 
  html:
    embed-resources: true
editor: visual
bibliography: references.bib
---

```{r}
#| eval: false
load("data/elections_tidy.rda")
load("data/surveys_tidy.rda")

library(tidyverse)
```

## Vamos a ver que esto funcione chavaleesssssss

# Q3: Who benefits from low turnout?

For this question we want to compare the number of votes that parties get depending on the turnout, to find out who get proportionally more votes when there is lower turnout that when there is higher turnout.

-   Question: who benefits from low turnout? =\> proportion of vote share by party depending on the turnout by each municipality
    -   independent of the population size!!

## Statistical analysis: without categorisation

Firstly, we can use statistics to find out the differences.

=\> regression model with vote share by party is the dependent variable and turnout is the independent / explanatory variable =\> quantify relationship and test statistical significance

Process:

```{r}

```

### New variables: first group by municipality (code_mun), anno, party_recorded =\> variables by which we want to differentiate

```         
-   total_votes = null + candidature + white ballots = total votes in each municipality 
-   turnout =  total_votes / census = the proportion of actual votes / posible votes 
-   vote_share_by_party = votes / total_votes = the share of the total vote by each party 
```

```{r}
#| eval: false
election_data_tidy <- election_data_tidy |> 
  group_by(cod_mun, date, party_recoded) |> # Is it the same if we group by date?
  mutate(
    total_votes = votos_blancos + votos_nulos + votos_candidaturas,
    turnout = total_votes / censo,
    votes_recoded = sum(votes, na.rm = TRUE),
    vote_share_by_party = votes_recoded / total_votes
  ) |> 
  ungroup()

```

### Model relationship for all parties and compare the slopes:

#### Interaction (vote_share \~ turnout \* party_recoded) = how relationship between turnout and vote share differs by party

Fixed effects =\> explicitly compare how the relationship between turnout and vote share varies across parties

-   estimate a separate coefficient for each party =\> directly observe how each party’s vote share changes with turnout =\> goal: pinpoint which parties gain or lose vote share in low-turnout scenarios

```{r}
#| eval: false
# regression model with interaction between turnout and party
model_all <- lm(vote_share_by_party ~ turnout * party_recoded, data = election_data_tidy)

```

#### Visual representation

```{r}
#| eval: false
ggplot(election_data_tidy, aes(x = turnout, y = vote_share_by_party, colour = party_recoded)) +
  geom_smooth(method = "lm", se = FALSE) +
  labs(
    title = "Party-Specific Trends: Vote Share vs Turnout",
    x = "Turnout",
    y = "Vote Share",
    colour = "Party"
  ) +
  theme_minimal()
```

```         
-   positive slope for turnout = party gains vote share as turnout increases
-   negative slope = party benefits more from low turnout
```

#### Interpretation

The plot displays the relationship between voter turnout and vote share for various political parties.

-   Overall Trend: a strong positive correlation exists between voter turnout and the vote share of PP =\> increase of turnout = significant increase of vote share =\> interpretation: PP support base is highly engaged and likely to vote

-   Inverse Relationships: some parties show an inverse or weaker relationship between turnout and vote share.

-   Party-Specific Performance: performance of some parties varies considerably.

    -   flat relationship: vote share isn't strongly affected by turnout changes
    -   complex patterns: vote share possibly influenced by factors not captured in the graph (e.g., specific campaign strategies, regional variations)

-   Limitations: no information on the total number of votes for each party =\> shows only the relative proportion (vote share) within the context of the turnout

    -   a party with a high vote share at low turnout might still have fewer total votes than another party with a lower share at higher turnout

### Significance

```{r}
#| eval: false
summary(model_all)

library(broom)
# extract coefficients
tidy(model_all)

```

-   turnout: Main effect of turnout (baseline effect for the reference party)
-   party_recoded: Fixed effect for each party (baseline vote share differences between parties).
-   turnout:party_recoded: Interaction terms, showing how turnout affects each party differently.

Interpretation: - coefficients for turnout:party_recoded =\> how each party's vote share changes with turnout compared to the baseline party

```         
-   If a party's coefficient for turnout:party_recoded is positive, it benefits more from higher turnout.
-   If the coefficient is negative, it benefits more from lower turnout
```

## Statistical analysis: with categorisation

GÜR wants to keep working on this

```{r}
#| eval: false
data <- election_data_tidy |> 
  mutate(
    turnout_category = cut(
      turnout,
      breaks = c(0, 0.4, 0.6, 0.8, 1), 
      labels = c("Low", "Medium", "High", "Very High"),
      include.lowest = TRUE
    )
  )

summary_data <- election_data_tidy |> 
  group_by(turnout_category, party_recoded) |> 
  summarise(
    avg_vote_share = mean(vote_share_by_party, na.rm = TRUE),
    .groups = "drop"
  )

# Visualise
ggplot(summary_data, aes(x = turnout_category, y = avg_vote_share, fill = party_recoded)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(
    title = "Vote Share by Turnout Level and Party",
    x = "Turnout Category",
    y = "Average Vote Share",
    fill = "Party"
  ) +
  theme_minimal()
```

### Interpretation

-   **Partido Nacionalista Vasco**: hypothesis: presents itself only in pais vasco, where its always going to have high voter share. if it was present in other communities its average voter share would not be so high

# NOTES

Should we do a comparison between the years? Just for fun? or to kill ourselves?

Should we divide between nationaly represented parties? To avoid problem of Partido Nacionalista Vasco?

# Q4: How to analyze the relationship between census and vote? Is it true that certain parties win in rural areas?

Difference rural / urban

-   [@gómezvalenzuela2023] p. 432

-   \<10.000 rural, \>10.000 urban

Biggest census implies more votes for certain parties?

Classify municipalities in rural and urban areas.

Know which is the maximun and minum value of the census

Check winners by area.

# Original silly 

Work with new data without NA's =\> possible for my computer

```{r}
load(file = "data/elections_tidy.rda")

x <- election_data_tidy
# election_data_tidy <- x
```

### Chaos vs stability code

```{r}
# seelcted municipios 
race <- election_data_tidy |> 
  filter(municipio %in% c("Alpedrete", "Moaña", 
                          "Cornellà de Llobregat",
                          "Manacor", "Madrid", "Bilbao", 
                          "Vitoria-Gasteiz", "Gijón"))

# winners by year and municipio
winners <- race |> 
  group_by(municipio, date) |> 
  arrange(desc(votes)) |> 
  slice(1) |> # most votes = winners 
  ungroup()


# record winning party from previous year
stability <- winners |> 
  arrange(municipio, date) |>
  group_by(municipio) |>
  mutate(
    previous_party = lag(party_recoded), # winning party previous election
    party_change = ifelse(party_recoded == previous_party, 0, 1) # 1 if the party changed, 0 otherwise
  ) |>
  ungroup()


# sum stability/chaos for each municipality
chaos_summary <- stability |>
  group_by(municipio) |>
  summarise(
    total_changes = sum(party_change, na.rm = TRUE), # 
    total_comparisons = n() - 1, # total comparisons (changes between elections = elections -1)
    chaos_rate = total_changes / total_comparisons    # Proportion of elections with a change
  )
```

### Visuals 
```{r}
# visuals 

# basic 
ggplot(chaos_summary, aes(x = municipio, y = chaos_rate, fill = municipio)) +
  geom_col() +
  labs(
    title = "Chaos Rate of Municipalities",
    x = "Municipality",
    y = "Chaos Rate (Proportion of Elections with Change)"
  ) +
  theme_minimal()



# good 
library(viridis)
chaos_withlabels <-
  ggplot(chaos_summary, 
         aes(x = reorder(municipio, chaos_rate), 
             y = chaos_rate, 
             fill = chaos_rate)) +
  geom_col(width = 0.7, alpha = 0.9) +
  #xlim(0, 0.8) + 
  scale_fill_viridis(option = "plasma", direction = -1, name = "Chaos Rate") +
  geom_text(aes(label = municipio), 
            hjust = 1.1, color = "white", size = 5, fontface = "bold") +
  geom_text(aes(label = scales::percent(chaos_rate, accuracy = 1)), 
            hjust = -0.1, size = 4, fontface = "bold") +
  labs(
    title = "Chaos Rate of Municipalities in Elections",
    subtitle = "Proportion of elections with a change in the winning party",
    x = "Municipality",
    y = "Chaos Rate (%)"
  ) +
  coord_flip() + 
  scale_y_continuous(
    limits = c(0, 0.7),
    breaks = seq(0.2, 1, by = 0.2),
    labels = c("1/5", "2/5", "3/5", "4/5", "5/5") 
  ) +
  theme_minimal(base_size = 14) +
  theme(
    axis.text.y = element_blank(),  
    axis.text.x = element_text(size = 11, family = "Roboto", color = "black"),
    plot.title = element_text(face = "bold", size = 16, family = "Roboto"),
    plot.subtitle = element_text(size = 12, family = "Roboto"), 
    legend.title = element_text(size = 11, family = "Roboto", face = "bold"),
    legend.text = element_text(size = 10, family = "Roboto"),
    legend.box.background = element_rect(color = "black", size = 0.5), 
    panel.grid.major.y = element_blank(), 
    legend.key.size = unit(1, "lines")
  )


chaos_withlabels



```


### MEMES 
```{r}
library(grid)
thisisfine <- rasterGrob(png::readPNG("thisisfine.png"),
                         x = 1, y = 0.86,  
                         hjust = 1, vjust = 1, 
                         width = unit(0.24, "npc")) 

# new plotting canvas
thisisfine_plot <- 
  grid.newpage()  +
  grid.draw(ggplotGrob(chaos_withlabels))  +
  grid.draw(thisisfine)
```

```{r}
disastergirl <- rasterGrob(png::readPNG("disastergirl.png"),
                         x = 1, y = 1,  
                         hjust = 1, vjust = 1, 
                         width = unit(0.24, "npc")) 

moana <- rasterGrob(png::readPNG("moana.png"),
                         x = 0.92, y = 0.97,  
                         hjust = 1, vjust = 1, 
                         width = unit(0.08, "npc")) 

vitoria_gasteiz <- rasterGrob(png::readPNG("vitoria-gasteiz.png"),
                         x = 0.85, y = 0.92,  
                         hjust = 1, vjust = 1, 
                         width = unit(0.08, "npc")) 

# new plotting canvas
disastergirl_plot <- grid.newpage()  +
  grid.draw(ggplotGrob(chaos_withlabels))  +
  grid.draw(disastergirl) + 
  grid.draw(moana) + 
  grid.draw(vitoria_gasteiz)
  
```


### Heatmap 

```{r}
# colour by chaos_rate legend
legend_colours <- 
  chaos_summary |>
  distinct(chaos_rate) |> 
  arrange(chaos_rate) |>  
  mutate(colour = viridis_pal(option = "plasma", direction = -1)(n()))

# expand stability df 
x <- stability
stability <- x
stability <- stability |> 
  left_join(chaos_summary, by = "municipio") |> 
  left_join(legend_colours, by = "chaos_rate") |> 
  group_by(municipio) |>  
  arrange(chaos_rate)

# colour palette
municipality_colours <- 
  stability |>  
  distinct(municipio, chaos_rate, colour) |> 
  select(-chaos_rate) |> 
  deframe() 

ggplot(stability, 
        aes(x = factor(date, levels = unique(date)), 
            y = reorder(municipio, chaos_rate, .desc = TRUE), 
            fill = siglas)) +
  geom_tile(colour = "white", size = 0.7) + 
  scale_fill_manual(
    values = c(
      "PP" = "#1db4e8",
      "PSOE" = "#c30505",
      "OTHER" = "gray60",
      "PODEMOS" = "#a444b4",
      "VOX" = "#83b431",
      "ERC" = "#ffbf41",
      "CIU" = "#1b348a",
      "MP" = "#004938",
      "CS" = "#eb6109",
      "EAJ-PNV" = "darkgreen",
      "BNG" = "lightblue",
      "EH BILDU" = "#03cfb4"
    ),
    name = "Winning Party"
  ) +
  labs(
    title = "Winning Party by Municipality and Election Year",
    subtitle = "Party with the Most Votes in Each Election",
    x = "Election Year",
    y = "Municipality"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(face = "bold", size = 16, family = "Roboto"),
    plot.subtitle = element_text(size = 12, family = "Roboto"),
    axis.text.x = element_text(size = 11, family = "Roboto", color = "black", angle = 20, hjust = 1),
    axis.text.y = element_text(size = 11, family = "Roboto", 
                               color = municipality_colours), 
    axis.title = element_blank(), 
    legend.title = element_text(size = 11, family = "Roboto", face = "bold"),
    legend.text = element_text(size = 10, family = "Roboto"),
    legend.box.background = element_rect(color = "black", size = 0.5),
    legend.position = "bottom", 
    legend.key.size = unit(1, "lines"),
    panel.grid = element_blank() 
  ) 


```
